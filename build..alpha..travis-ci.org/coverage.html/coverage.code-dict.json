{"/home/travis/build/npmtest/node-npmtest-scuttlebutt/test.js":"/* istanbul instrument in package npmtest_scuttlebutt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-scuttlebutt/lib.npmtest_scuttlebutt.js":"/* istanbul instrument in package npmtest_scuttlebutt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_scuttlebutt = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_scuttlebutt = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-scuttlebutt/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-scuttlebutt && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_scuttlebutt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_scuttlebutt\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_scuttlebutt.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_scuttlebutt.rollup.js'] =\n            local.assetsDict['/assets.npmtest_scuttlebutt.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_scuttlebutt.__dirname + '/lib.npmtest_scuttlebutt.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-scuttlebutt/node_modules/scuttlebutt/index.js":"var EventEmitter = require('events').EventEmitter\nvar i = require('iterate')\nvar duplex = require('duplex')\nvar inherits = require('util').inherits\nvar serializer = require('stream-serializer')\nvar u = require('./util')\nvar timestamp = require('monotonic-timestamp')\n\nexports = \nmodule.exports = Scuttlebutt\n\nexports.createID = u.createID\nexports.updateIsRecent = u.filter\nexports.filter = u.filter\nexports.timestamp = timestamp\n\nfunction dutyOfSubclass() {\n  throw new Error('method must be implemented by subclass')\n}\n\nfunction validate (data) {\n  if(!(Array.isArray(data) \n    && 'string' === typeof data[2]\n    && '__proto__'     !== data[2] //THIS WOULD BREAK STUFF\n    && 'number' === typeof data[1]\n  )) return false\n\n  return true\n}\n\ninherits (Scuttlebutt, EventEmitter)\n\nfunction Scuttlebutt (opts) {\n\n  if(!(this instanceof Scuttlebutt)) return new Scuttlebutt(opts)\n  var id = 'string' === typeof opts ? opts : opts && opts.id\n  this.sources = {}\n  this.setMaxListeners(Number.MAX_VALUE)\n  //count how many other instances we are replicating to.\n  this._streams = 0\n  if(opts && opts.sign && opts.verify) {\n    this.setId(opts.id || opts.createId())\n    this._sign   = opts.sign\n    this._verify = opts.verify\n  } else {\n    this.setId(id || u.createId())\n  }\n}\n\nvar sb = Scuttlebutt.prototype\n\nvar emit = EventEmitter.prototype.emit\n\nsb.applyUpdate = dutyOfSubclass\nsb.history      = dutyOfSubclass\n\nsb.localUpdate = function (trx) {\n  this._update([trx, timestamp(), this.id])\n  return this\n}\n\nsb._update = function (update) {\n  //validated when it comes into the stream\n  var ts = update[1]\n  var source = update[2]\n\n  //if this message is old for it's source, ignore it. it's out of\n  //order. each node must emit it's changes in order!\n  //emit an 'old_data' event because i'll want to track how many\n  //unnecessary messages are sent.\n\n  var latest = this.sources[source]\n  if(latest && latest >= ts)\n    return emit.call(this, 'old_data', update), false\n\n  this.sources[source] = ts\n\n  var self = this\n  function didVerification (err, verified) {\n\n    // I'm not sure how what should happen if a async verification\n    // errors. if it's an key not found - that is a verification fail,\n    // not a error. if it's genunie error, really you should queue and \n    // try again? or replay the message later\n    // -- this should be done my the security plugin though, not scuttlebutt.\n\n    if(err)\n      return emit.call(self, 'error', err)\n\n    if(!verified)\n      return emit.call(self, 'unverified_data', update)\n\n    if(self.applyUpdate(update))\n      emit.call(self, '_update', update) //write to stream.\n  }\n\n  if(source !== this.id) {\n    if(this._verify)\n      this._verify(update, didVerification)\n    else\n      didVerification(null, true)\n  } else {\n    if(this._sign) {\n      //could make this async easily enough.\n      update[3] = this._sign(update)\n    }\n    didVerification(null, true)\n  }\n\n  return true\n}\n\nsb.createStream = function (opts) {\n  var self = this\n  //the sources for the remote end.\n  var sources = {}, other\n  var syncSent = false, syncRecv = false\n\n  this._streams ++\n\n  opts = opts || {}\n  var d = duplex()\n  d.name = opts.name\n  var outer = serializer(opts && opts.wrapper)(d)\n  outer.inner = d\n\n  d.writable = opts.writable !== false\n  d.readable = opts.readable !== false\n\n  syncRecv   = !d.writable\n  syncSent   = !d.readable\n\n  var tail = opts.tail !== false //default to tail=true\n\n  function start (data) {\n    //when the digest is recieved from the other end,\n    //send the history.\n    //merge with the current list of sources.\n    if (!data || !data.clock) {\n        d.emit('error');\n        return d._end()\n    }\n\n    sources = data.clock\n\n    i.each(self.history(sources), function (data) {d._data(data)})\n\n    //the _update listener must be set after the history is queued.\n    //otherwise there is a race between the first client message\n    //and the next update (which may come in on another stream)\n    //this problem will probably not be encountered until you have \n    //thousands of scuttlebutts.\n        \n    self.on('_update', onUpdate)\n    \n    d._data('SYNC')\n    syncSent = true\n    //when we have sent all history\n    outer.emit('header', data)\n    outer.emit('syncSent')\n    //when we have recieved all histoyr\n    //emit 'synced' when this stream has synced.\n    if(syncRecv) outer.emit('sync'), outer.emit('synced')\n    if(!tail) d._end()\n  }\n\n  d\n    .on('_data', function (data) {\n      //if it's an array, it's an update.\n      if(Array.isArray(data)) {\n        //check whether we are accepting writes.\n        if(!d.writable)\n          return\n        if(validate(data))\n          return self._update(data)\n      }\n      //if it's an object, it's a scuttlebut digest.\n      else if('object' === typeof data && data)\n        start(data)\n      else if('string' === typeof data && data == 'SYNC') {\n        syncRecv = true\n        outer.emit('syncRecieved')\n        if(syncSent) outer.emit('sync'), outer.emit('synced')\n      }\n    }).on('_end', function () {\n      d._end()\n    })\n    .on('close', function () {\n      self.removeListener('_update', onUpdate)\n      self.removeListener('dispose', dispose)\n      //emit the number of streams that are remaining...\n      //this will be used for memory management...\n      self._streams --\n      emit.call(self, 'unstream', self._streams)\n    })\n\n  if(opts && opts.tail === false) {\n    outer.on('sync', function () {\n      process.nextTick(function () {\n        d._end()\n      })\n    })\n  }\n  function onUpdate (update) { //value, source, ts\n    if(!validate(update) || !u.filter(update, sources))\n      return\n\n    d._data(update)\n\n    //really, this should happen before emitting.\n    var ts = update[1]\n    var source = update[2]\n    sources[source] = ts\n  }\n\n  function dispose () {\n    d.end()\n  }\n\n  var outgoing = { id : self.id, clock : self.sources }\n\n  if (opts && opts.meta) outgoing.meta = opts.meta\n\n  if(d.readable) {\n    d._data(outgoing)\n    if(!d.writable && !opts.clock)\n      start({clock:{}})\n\n  } else if (opts.sendClock) {\n    //send my current clock.\n    //so the other side knows what to send\n    d._data(outgoing)\n  }\n\n  self.once('dispose', dispose)\n\n  return outer\n}\n\nsb.createWriteStream = function (opts) {\n  opts = opts || {}\n  opts.writable = true; opts.readable = false\n  return this.createStream(opts)\n}\n\nsb.createReadStream = function (opts) {\n  opts = opts || {}\n  opts.writable = false; opts.readable = true\n  return this.createStream(opts)\n}\n\nsb.dispose = function () {\n  emit.call(this, 'dispose')\n}\n\nsb.setId = function (id) {\n  if('__proto__' === id) throw new Error('__proto__ is invalid id')\n  if(id == null) throw new Error('null is not invalid id')\n  this.id = id\n  return this\n}\n\nfunction streamDone(stream, listener) {\n\n  function remove () {\n    stream.removeListener('end',   onDone)\n    stream.removeListener('error', onDone)\n    stream.removeListener('close',   onDone)\n  }\n  function onDone (arg) {\n    remove()\n    listener.call(this, arg)\n  }\n\n  //this makes emitter.removeListener(event, listener) still work\n  onDone.listener = listener\n\n  stream.on('end',   onDone)\n  stream.on('error', onDone)\n  stream.on('close', onDone)\n}\n\n//create another instance of this scuttlebutt,\n//that is in sync and attached to this instance.\nsb.clone = function () {\n  var A = this\n  var B = new (A.constructor)\n  B.setId(A.id) //same id. think this will work...\n\n  A._clones = (A._clones || 0) + 1\n\n  var a = A.createStream({wrapper: 'raw'})\n  var b = B.createStream({wrapper: 'raw'})\n\n  //all updates must be sync, so make sure pause never happens.\n  a.pause = b.pause = function noop(){}\n\n  streamDone(b, function () {\n    A._clones--\n    emit.call(A, 'unclone', A._clones)\n  })\n\n  a.pipe(b).pipe(a)\n  //resume both streams, so that the new instance is brought up to date immediately.\n  a.resume()\n  b.resume()\n\n  return B\n}\n\n","/home/travis/build/npmtest/node-npmtest-scuttlebutt/node_modules/scuttlebutt/util.js":"exports.createId = \nfunction () {\n  return [1,1,1].map(function () {\n    return Math.random().toString(16).substring(2).toUpperCase()\n  }).join('')\n}\n\nexports.filter = function (update, sources) {\n  var ts = update[1]\n  var source = update[2]\n  return (!sources || !sources[source] || sources[source] < ts)\n}\n\nexports.protoIsIllegal = function (s) {\n  s.emit('invalid', new Error('\"__proto__\" is illegal property name'))\n  return null\n}\n\nfunction invalidUpdate(t) {\n  t.emit('invalid', new Error('invalid update'))\n}\n\nexports.validUpdate = function (t, update) {\n  if(!Array.isArray(update)) return invalidUpdate(t)\n  if('string' !== typeof update[1] || 'number' !== typeof update[2])\n    return invalidUpdate(t)\n}\n\nexports.sort = function (hist) {\n  return hist.sort(function (a, b) {\n    //sort by timestamps, then ids.\n    //there should never be a pair with equal timestamps\n    //and ids.\n    return a[1] - b[1] || (a[2] > b[2] ? 1 : -1)\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-scuttlebutt/node_modules/scuttlebutt/events.js":"var Scuttlebutt = require('./')\nvar inherits = require('util').inherits\nvar each = require('iterate').each\nvar u = require('./util')\nvar EventEmitter = require('events').EventEmitter\n\nmodule.exports = ReliableEventEmitter\n\ninherits(ReliableEventEmitter, Scuttlebutt)\n\nfunction ReliableEventEmitter (opts) {\n  if(!(this instanceof ReliableEventEmitter)) return new ReliableEventEmitter(opts)\n  Scuttlebutt.call(this, opts)\n}\n\nvar emit = EventEmitter.prototype.emit\nvar emitter = ReliableEventEmitter.prototype\n\nemitter.emit = function (event) {\n  if(event === '__proto__')\n    throw new Error('__proto__ is illegal event name')\n  var args = [].slice.call(arguments)\n  if(event == 'newListener')\n    return emit.apply(this, args)\n  return this.localUpdate(args)\n}\n\nvar on = EventEmitter.prototype.on\n\nemitter.on = function (event, listener) {\n  if(event === '__proto__')\n    throw new Error('__proto__ is invalid event')\n  return on.call(this, event, listener)\n}\n\nemitter.applyUpdate = function (update) {\n  var key = update[0][0]\n  this.events = this.events || {}\n  this.events[key] = this.events[key] || []\n  this.events[key].push(update)\n  //emit the event.\n  emit.apply(this, update[0])\n  return true\n}\n\n\nemitter.history = function (filter) {\n  var self = this\n  var h = []\n  this.events = this.events || {}\n  each(this.events, function (es) {\n    each(es, function (e) {\n      if(u.filter(e, filter))\n        h.push(e)\n    })\n  })\n  return u.sort(h)\n}\n\n\n","/home/travis/build/npmtest/node-npmtest-scuttlebutt/node_modules/scuttlebutt/model.js":"var Scuttlebutt = require('./index')\nvar inherits = require('util').inherits\nvar each = require('iterate').each\nvar u = require('./util')\n\nmodule.exports = Model\n\ninherits(Model, Scuttlebutt)\n\nfunction Model (opts) {\n  if(!(this instanceof Model)) return new Model(opts)\n  Scuttlebutt.call(this, opts)\n  this.store = {}\n}\n\nvar m = Model.prototype\n\nm.set = function (k, v) {\n  if(k==='__proto__') return u.protoIsIllegal(this)\n  this.localUpdate([k, v])\n  return this\n}\n\n\nm.get = function (k) {\n  if(k==='__proto__') return u.protoIsIllegal(this)\n  if(this.store[k])\n    return this.store[k][0][1]\n}\n\nm.keys = function () {\n  var a = []\n  for (var k in this.store)\n    a.push(k)\n  return a\n}\n\nm.forEach =\nm.each = function (iter) {\n  for (var k in this.store)\n    iter(this.store[k][0][1], k, this.store)\n  return this\n}\n\n//return this history since sources.\n//sources is a hash of { ID: TIMESTAMP }\n\nm.applyUpdate = function (update) {\n  var key = update[0][0]\n  if('__proto__' === key) return u.protoIsIllegal(this)\n  //ignore if we already have a more recent value\n\n  if('undefined' !== typeof this.store[key]\n    && this.store[key][1] > update[1])\n    return this.emit('_remove', update)\n\n  if(this.store[key]) this.emit('_remove', this.store[key])\n\n  this.store[key] = update\n\n  this.emit.apply(this, ['update'].concat(update))\n  this.emit('change', key, update[0][1])\n  this.emit('change:'+key, update[0][1])\n\n  return true\n}\n\nm.history = function (sources) {\n  var self = this\n  var h = []\n  each(this.store, function (e) {\n    if(u.filter(e, sources))\n      h.push(e)\n  })\n  return u.sort(h)\n}\n\nm.toJSON = function () {\n  var o = {}, notNull = false\n  for (var k in this.store) {\n    var v = this.get(k)\n    if(v != null)\n      o[k] = this.get(k)\n  }\n  return o\n}\n","/home/travis/build/npmtest/node-npmtest-scuttlebutt/node_modules/scuttlebutt/security.js":"var crypto = require('crypto')\n\n//\n//security is pluggable - or can be left out.\n//\n//there is a sign method, and a verify method (which may be async)\n//hmm, after thinking through some possible attacks, \n//https://github.com/dominictarr/scuttlebutt/issues/6\n//I've realized that it is necessary to let the security plugin set\n//the ID. hmm, that means there will need to be an async initialization step...\n//\n//The security will either need to shell out to `ssh-keygen` or to read a key pair \n//from the file system. hmm, There should only be a single instance of security per \n//process (except when testing), so maybe init security, then pass it to a new scuttlebutt)\n//there may be many scuttlebutt instances but they should use the same key pair.\n//\n//that is up to security - maybe init the security when the app starts - indeed,\n//probably generate the key during installation, and then `readFileSync()`\n//\n//Yup, because we don't want to be regenerating that stuff live.\n//\n// we do need the security to be able to set the key though!\n\n//exactly what init api the security plugin wants to use is it's own business.\n//it doesn't have to pass keys in like this...\n\nvar algorithm = 'RSA-SHA1'\nvar format = 'base64'\nvar hashAlg = 'SHA1'\n\nmodule.exports = function (keys, \n  //THIS IS SERIOUS BUSINESS!\n  PRIVATE, PUBLIC\n  //THEREFORE THE CAPS MUST BE LOCKED\n  ) {\n  return {\n    sign: function (update) {\n      var data = JSON.stringify(update)\n      return crypto.createSign(algorithm).update(data).sign(PRIVATE, format)\n    },\n    verify: function (update, cb) {\n      var _update = update.slice()\n      var sig = _update.pop()\n      var id  = update[2]\n      var data = JSON.stringify(_update)\n      var key = keys[id]\n      if(!key) return cb(null, false)\n      cb(null, crypto.createVerify(algorithm).update(data).verify(key, sig, format))\n    },\n    createId: function () {\n      //hash of public key.\n      return crypto.createHash(hashAlg).update(PUBLIC).digest(format)\n    },\n    publicKey: PUBLIC\n  }\n}\n\n"}